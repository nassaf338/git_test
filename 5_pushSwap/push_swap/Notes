https://github.com/clemedon/makefile_tutor

############################################################################
#RULE format
################################################################################
target: prerequisite
	recipe line 1
	recipe line 2
	...

################################################################################
# VARIABLES
################################################################################
A := $(C) #The value of A is evaluated at the time of assignment. C is replaced by it's value right away when A is assigned
A = $(C) # the value of A is evaluated only when A is used later. It will take the current value of C

################################################################################
#SPECIAL VARIABLES that represents different parts of a rule
################################################################################
$< #leftmost prerequisite (1st prerequisite listed in the example: $< = my_program.c)
$@ #current target
my_program.o : my_program.c myheader.h
	gcc -c $< -o $@
	= gcc -c my_program.c -o my_program.o

$^ # expands to all prerequisites listed for the target of the rule
my_program: main.o helper.o
	gcc $^ -o $@
	= gcc main.o helper.o -o my_program

$(@D) #extracts the directory part (without the filename) from the curretn target ($@). If the target is in the current dirctory it returns .
output/my_program.o: my_program.c
	mkdir -p $(@D) #with -p will create the directory if it doesn't exists or returns no error if the directory exists
	gcc -c my_program.c -o $@
	= gcc -c my_program.c -o output/my_program.of

$(@F) #extracts the file name (without the directory) from the current target
output/my_program.o: my_program.c
	=$(@F)	will expand to "my_program.o"

################################################################################
#VERSION 1
################################################################################
    before build:    after build:
    .                .
    ├── Makefile     ├── Makefile
    └── main.c       ├── main.o
                     ├── main.c
                     └── icecream

#ingredients
NAME := icecream
SRCS := main.c #source files
OBJS := main.o #object files

CC := clang #compiler
CFLAGS := -Wall -Werror -Wextra #compiler flags

#utensils
RM := rm -f #force remove
MAKEFLAGS += --no-print-directory #make flags

#recipes
all: $(NAME) #default goal - should appear first - the order of the following rules doesn't matter anymore

$(NAME) : $(OBJS) #linking .o to binary (executable file)
	$(CC) $(OBJS) -o $(NAME)

clean: #remove .o
	$(RM) $(OBJS)

fclean: clean #removes .o + binary
	$(RM) $(NAME)

re:
	$(MAKE) fclean
	$(MAKE) all

.PHONY: clean fclean re 
#"all" is not included in .PHONY because the rule doesn't have a recipe. prerequisites are completed before their targets.

#implicit compilation rule (no need to be written)
#% means for every .o file with the same .c file
#"-c" this flag tells the compiler to only compile the source file into an object file (not to link it to an executable yet)
#"-o $@" to specify the output file
#"$<" specifies which file to compile from (like this the command is complete and can execute)
%.o: %.c
	$(CC) $(FLAGS) -c -o $@ $<
	= gcc -Werror -Wall -Wextra -c -o main.o main.c



################################################################################
#VERSION 2
################################################################################
    before build:     after build:
    .                 .
    ├── Makefile      ├── Makefile
    ├── main.c        ├── main.o
    └── icecream.h    ├── main.c
                      ├── icecream.h
                      └── icecream

NAME := icecream
SRCS := main.c
OBJS := main.o

CC := clang
CFLAGS := -Wall -Werror -Wextra

RM := rm -f
MAKEFLAGS += --no-print-directory

all: $(NAME) #default goal - should appear first - the order of the following rules doesn't matter anymore

$(NAME): $(OBJS)
	$(CC) $(OBJS) -o $(NAME)
	$(info CREATED $(NAME)) #used to print a custom message about what has just been built

%.o: %.c (implicit rule added to be able to get info)
	$(CC) $(FLAGS) -c -o $@ $<
	$(info CREATED $@) (info better than echo because it's a make function and can be used anywhere in a makefile  =powerful for debugging)

clean:
	$(RM) $(OBJS)

fclean: clean
	$(RM) $(NAME)

re:
	$(MAKE) fclean
	$(MAKE) all

.PHONY: clean fclean re 
.SILENT: #so Make won't print each line of a rules reciepe before it is executed
#it silence the rules output specified as prerequisites.
# to silence at the recipe-line level we can prefix the wanted recipe lines with an @symbol.


########################################
#VERSION 3
########################################
    before build:          after build:
    .                      .
    ├── src                ├── src
    │   ├── base           │   ├── base
    │   │   ├── water.c    │   │   ├── water.c
    │   │   └── milk.c     │   │   └── milk.c
    │   ├── arom           │   ├── arom
    │   │   └── coco.c     │   │   └── coco.c
    │   └── main.c         │   └── main.c
    ├── include            ├── obj
    │   └── icecream.h     │   ├── base
    └── Makefile           │   │   ├── water.o
                           │   │   └── milk.o
                           │   ├── arom
                           │   │   └── coco.o
                           │   └── main.o
                           ├── include
                           │   └── icecream.h
                           ├── Makefile
                           └── icecream

NAME := icecream

SRC_DIR := src
OBJ_DIR := obj
SRCS := \ #we use \ to split the line to increase the readability
	main.c \
	arom/coco.c \
	base/milk.c \
	base/water.c \
SRCS        := $(SRCS:%=$(SRC_DIR)/%)
OBJS        := $(SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)

CC := clang
CFLAGS = -Werror -Wall -Wextra

RM := rm -f
DIR_DUP = mkdir -p $(@D)

all: $(NAME)

$(NAME): $(OBJS)
	$(CC) $(OBJS) -o $(NAME)

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	$(DIR_DUP)
	$(CC) $(CFLAGS) -c -o $@ $< #can also be written: $(CC) $(FLAGS) -c $< -o $@
	$(info CREATED $@)

clean:
	$(RM) $(OBJS)

fclean: clean
	$(RM) $(NAME)

re:
	$(MAKE) fclean
	$(MAKE) all

.PHONY: clean fclean re
.SILENT:

########################################
#VERSION 4
########################################
    before build:          after build:
    .                      .
    ├── src                ├── src
    │   ├── base           │   ├── base
    │   │   ├── water.c    │   │   ├── water.c
    │   │   └── milk.c     │   │   └── milk.c
    │   └── arom           │   └── arom
    │       └── coco.c     │       └── coco.c
    ├── include            ├── include
    │   └── icecream.h     │   └── icecream.h
    └── Makefile           ├── .build
                           │   ├── base
                           │   │   ├── water.o
                           │   │   ├── water.d
                           │   │   ├── milk.o
                           │   │   └── milk.d
                           │   └── arom
                           │       ├── coco.o
                           │       └── coco.d
                           ├── Makefile
                           └── libicecream.a